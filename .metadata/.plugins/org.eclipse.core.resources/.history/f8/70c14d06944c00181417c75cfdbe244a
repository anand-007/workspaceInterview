
public class DynamicRunner {
	
	public static int longestCommonSubsequence(String input1, String input2){
		
	}
	
	public static int longestIncreasingSubsequence(int[] inputArray){
		int[] lcs = new int[inputArray.length];
		
		for(int k=0;k<inputArray.length;k++){
			lcs[k]=1;
		}
		
		for(int i=1;i<inputArray.length;i++){
			for(int j=0;j<i;j++){
				if(inputArray[i]>inputArray[j]){
					lcs[i] = Math.max(lcs[i],lcs[j]+1);
				}
				
			}
		}
		
		System.out.println(lcs.toString());
		
		int max = Integer.MIN_VALUE;
		
		for(int l=0;l<lcs.length;l++){
			
			if(lcs[l]>max){
				max = lcs[l];
			}
			
		}
		
		
		return max;
	}
	
	public static int minimumNumberOfJumps(int[] inputArray){
		
		if(inputArray[0]==0)
			return 0;
		
		int[] jumps = new int[inputArray.length];
		jumps[0] = 0;
		
		for(int i=1;i<inputArray.length;i++){
			jumps[i] = Integer.MAX_VALUE;
			for(int j=0;j<=i;j++){
				if(i<=j+inputArray[j]){
					jumps[i] = Math.min(jumps[i], jumps[j]+1);
				}
			}
			
		}
		return jumps[inputArray.length -1 ];
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		 int arr[] = {1,3,5,3,2,2,6,1,6,8,9};
		// System.out.println(minimumNumberOfJumps(arr));
		 
		 int[] inputArray = {3,1,4,7,2,8,5,9};
		 System.out.println(longestIncreasingSubsequence(inputArray));
		 
		
	}

}
