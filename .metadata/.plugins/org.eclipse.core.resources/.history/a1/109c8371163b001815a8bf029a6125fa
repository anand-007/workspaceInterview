import java.util.Stack;


public class StackSorting {
	
	public static Stack<Integer> sortStack(Stack<Integer> inputStack){
		Stack<Integer> resultStack = new Stack<Integer>();
		
		while(!inputStack.isEmpty()){
			Integer item = inputStack.pop();
			System.out.println(item);
			if(resultStack.isEmpty()){
				resultStack.push(item);
				continue;
			}
			if(resultStack.isEmpty() && resultStack.pop() < item){
				System.out.println(resultStack.pop() < item);
				resultStack.push(item);
			}else if(!resultStack.isEmpty()){
				while(!resultStack.isEmpty() || (!resultStack.isEmpty() && resultStack.pop() >item)){
					Integer resultItem = resultStack.pop();
					if(resultItem > item){
						inputStack.push(resultItem);
					}else {
						resultStack.push(item);
					}
				}
			}
		}
		
	
		return resultStack;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		Stack<Integer> inputStack = new Stack<Integer>();
		inputStack.push(new Integer(10));
		inputStack.push(new Integer(7));
		inputStack.push(new Integer(12));
		
		Stack<Integer> outputStack = sortStack(inputStack);
		System.out.println(outputStack);
	}

}
