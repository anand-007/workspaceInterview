package com.anand.interview;

public class TreeRunner {
	
	TreeNode deepNode = null;
	static int level=-1;
	static int maxLevel = -1;
	
	public static void inOrderDepth(int level, int maxLevel, TreeNode root){
		if(root!=null)
			return;
		inOrderDepth(level++, maxLevel, root.left);
		if(level>maxLevel){
			maxLevel = level;
			System.out.println(root.data);
		}
		inOrderDepth(level++, maxLevel, root.right);

		
	}
	
	public static int height(TreeNode root){
		if(root == null){
			return 0;
		}
		
		return 1+ Math.max(height(root.left),height(root.right));	
	}
	
	public static void deepNode(TreeNode root, int levels){
		if(levels == 1){
			System.out.println(root.data);
		} else {
			deepNode(root.left, levels-1);
			deepNode(root.right, levels-1);
		}
	}
	
	public static TreeNode findDeepestNode(TreeNode root){
		TreeNode resultNode = null;
		
		int levels = height(root);
		deepNode(root,levels);
		
			
		return resultNode;
	}
	
	public static void reverseTree(TreeNode root){
		
		if(root == null)
			return;
		
		if(root !=null){
			TreeNode temp = root.left;
			root.left = root.right;
			root.right = temp;
		}
		
		 reverseTree(root.left);
		 reverseTree(root.right);
	}
	
	public static void printKthNode(TreeNode root, int k){
		if(root == null)
			return;
		if(k==0){
			System.out.println(root.data);
		}
		printKthNode(root.left, k-1);
		printKthNode(root.right, k-1);
	}
	
	public static boolean hasSum(TreeNode root, int sum){
		
		if(root == null){
			return false;
		}
		
		boolean result = false;
		
		sum = sum - root.data;
		if(sum==0){
				return true;
			
		}
		
		if(root.left!=null){
			result = result || hasSum(root.left, sum); 
		}
		
		if(root.right!=null){
			result = result || hasSum(root.right, sum); 
		}
		
		return result;
		
	}
	
	
	public static boolean areIdentical(TreeNode node1, TreeNode node2){
		if(node1==null && node2 == null){
			return true;
		}
		if(node1 == null || node2 == null)
			return false;
		
		return (node1.data == node2.data) && (areIdentical(node1.left,node2.left) && areIdentical(node1.right, node2.right));
	       /* base cases */
	       /* base cases */

	}
	
	public static void inOrderTraversal(TreeNode root){
		
		if(root == null){
			return;
		}
		inOrderTraversal(root.left);
		System.out.print(root.data+ "->");
		inOrderTraversal(root.right);
		
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		TreeNode bottom1 = new TreeNode(40, null, null);
		TreeNode bottom2 = new TreeNode(50, null, null);
		TreeNode bottom3 = new TreeNode(60, null, null);
		TreeNode bottom4 = new TreeNode(70, null, null);
		
		TreeNode mid1 = new TreeNode(20, bottom1, bottom2);
		TreeNode mid2 = new TreeNode(30, bottom3, bottom4);
		
		TreeNode root = new TreeNode(10, mid1, mid2);
		
		//findDeepestNode(root);
		
		//TreeNode mid3 = new TreeNode(20, bottom1, bottom2);
		//TreeNode root2 = new TreeNode(10, mid3, null);
		
		//System.out.println(areIdentical(root, root));
		
		System.out.println(inOrderDepth(level, maxLevel,root));
		
		//printKthNode(root, 1);
		inOrderTraversal(root);

		
		reverseTree(root);
		
		System.out.println(root.data);
		inOrderTraversal(root);
		
		
	}

}
